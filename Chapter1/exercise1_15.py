# -*- coding: utf-8 -*-
"""
The sine of an angle (specified in radians) can be computed by making use of the approximation sin(x) ~ x if x is
sufficiently small, and the trigonometric identity:

              x           x
sin x = 3sin --- - 4sinÂ³ ---
              3          3

to reduce the size of the argument of sin. (For purposes of this
exercise an angle is considered ``sufficiently small'' if its magnitude is not greater than 0.1 radians.) These ideas
are incorporated in the following procedures:

(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
   (if (not (> (abs angle) 0.1))
       angle
       (p (sine (/ angle 3.0)))))

a.  How many times is the procedure p applied when (sine 12.15) is evaluated?

b.  What is the order of growth in space and number of steps (as a function of a) used by the process generated by the
sine procedure when (sine a) is evaluated?
"""
from operator import gt, mul, sub, truediv

from Chapter1.exercice1_8 import cube


def p(x, ev=[1]):
    print('evaluating p for the %s time' % (ev[0],))
    ev[0] += 1
    return sub(
        mul(3, x),
        mul(4, cube(x))
    )


def sine(angle):
    if not gt(abs(angle), 0.1):
        return angle
    return p(sine(truediv(angle, 3.0)))


if __name__ == '__main__':
    import math
    a = math.radians(math.degrees(12.15))
    print('(sine %(a)s)' % locals())
    print(sine(a))
