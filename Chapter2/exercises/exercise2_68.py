# -*- coding: utf-8 -*-
"""
https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-16.html#%_thm_2.68
"""
from Chapter2.exercises.exercise2_54 import list_equal
from Chapter2.exercises.exercise2_67 import sample_message, sample_tree
from Chapter2.themes.huffman_encoding_tree import (
    decode, is_leaf, left_branch_tree, right_branch_tree, symbol_leaf, symbols,
)
from Chapter2.themes.lisp_list_structured_data import (
    append, car, cdr, lisp_list, nil, print_lisp_list,
)
from Chapter2.themes.symbolic_data import quote, symbol_equal
from utils import error, let


def encode(message, tree):
    """Encode message, based on tree. That is, return the list of bits that
    enables decoding using tree"""
    if message is nil:
        return lisp_list()
    return append(
        encode_symbol(
            car(message),
            tree),
        encode(cdr(message), tree))


def encode_symbol(symbol, tree):
    """Encode symbol using the Huffman tree tree"""
    if tree is nil:
        error('empty tree - {}'.format(encode_symbol.__name__.upper()))

    def follow_branch(branch_selector, branch_code):
        """Search symbol in the branch returned by branch_selector, returning a
        list filled with branch_code if the symbol is found in this branch"""
        with let(branch_selector(tree)) as (branch,):
            if element_of_set(symbol, symbols(branch)):
                if is_leaf(branch):
                    if symbol_equal(symbol, symbol_leaf(branch)):
                        return lisp_list(branch_code)
                    else:
                        error('symbol not in tree - {}'.format(
                            follow_branch.__name__.upper()))
                return append(
                    lisp_list(branch_code),
                    encode_symbol(symbol, branch))

    return (follow_branch(left_branch_tree, 0) or
            follow_branch(right_branch_tree, 1))


def element_of_set(x, set):
    """Tests if element x is in set"""
    if set is nil:
        return False
    if symbol_equal(x, car(set)):
        return True
    return element_of_set(x, cdr(set))


def run_the_magic():
    with let(sample_message(), sample_tree()) as (encoded_msg, encoding_tree):
        with let(decode(encoded_msg, encoding_tree)) as (msg,):
            print('Encoding message:', end=' ')
            print_lisp_list(msg)
            with let(encode(msg, encoding_tree)) as (my_encoded_msg,):
                print('Code generated by encode function:', end=' ')
                print_lisp_list(my_encoded_msg)
                print('Original encoded message:', end=' ')
                print_lisp_list(encoded_msg)
                assert list_equal(quote(encoded_msg), quote(my_encoded_msg))


if __name__ == "__main__":
    run_the_magic()

